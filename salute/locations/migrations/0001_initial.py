# Generated by Django 5.2.1 on 2025-05-19 17:19

import uuid

import django.db.models.deletion
import django_choices_field.fields
from django.db import migrations, models

import salute.locations.models


class Migration(migrations.Migration):
    initial = True

    dependencies = [
        ("hierarchy", "0003_add_locality_to_groups"),
    ]

    operations = [
        migrations.CreateModel(
            name="SiteOperator",
            fields=[
                (
                    "id",
                    models.UUIDField(
                        default=uuid.uuid4,
                        editable=False,
                        primary_key=True,
                        serialize=False,
                        unique=True,
                        verbose_name="Salute ID",
                    ),
                ),
                ("created_at", models.DateTimeField(auto_now_add=True)),
                ("updated_at", models.DateTimeField(auto_now=True)),
                ("name", models.CharField(blank=True, db_index=True, max_length=255)),
                (
                    "district",
                    models.OneToOneField(
                        blank=True,
                        null=True,
                        on_delete=django.db.models.deletion.PROTECT,
                        related_name="site_operator",
                        to="hierarchy.district",
                    ),
                ),
                (
                    "group",
                    models.OneToOneField(
                        blank=True,
                        null=True,
                        on_delete=django.db.models.deletion.PROTECT,
                        related_name="site_operator",
                        to="hierarchy.group",
                    ),
                ),
            ],
        ),
        migrations.CreateModel(
            name="Site",
            fields=[
                (
                    "id",
                    models.UUIDField(
                        default=uuid.uuid4,
                        editable=False,
                        primary_key=True,
                        serialize=False,
                        unique=True,
                        verbose_name="Salute ID",
                    ),
                ),
                ("created_at", models.DateTimeField(auto_now_add=True)),
                ("updated_at", models.DateTimeField(auto_now=True)),
                ("name", models.CharField(max_length=255, unique=True)),
                (
                    "tenure_type",
                    django_choices_field.fields.TextChoicesField(  # type: ignore[call-overload]
                        choices=[
                            ("Freehold", "Freehold"),
                            ("Leasehold", "Leasehold"),
                            ("Rented", "Rented"),
                        ],
                        choices_enum=salute.locations.models.TenureType,
                        max_length=9,
                    ),
                ),
                (
                    "uprn",
                    models.CharField(
                        help_text="Unique Property Reference Number (12 digits)",
                        max_length=12,
                        unique=True,
                        verbose_name="UPRN",
                    ),
                ),
                ("building_name", models.CharField(blank=True, max_length=255)),
                ("street_number", models.CharField(blank=True, max_length=10)),
                ("street", models.CharField(max_length=255)),
                ("town", models.CharField(max_length=255)),
                ("county", models.CharField(max_length=255)),
                ("postcode", models.CharField(max_length=10)),
                ("latitude", models.DecimalField(decimal_places=6, max_digits=9)),
                ("longitude", models.DecimalField(decimal_places=6, max_digits=9)),
                (
                    "operator",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.PROTECT,
                        related_name="sites",
                        to="locations.siteoperator",
                    ),
                ),
            ],
        ),
        migrations.AddConstraint(
            model_name="siteoperator",
            constraint=models.CheckConstraint(
                condition=models.Q(
                    models.Q(
                        ("district__isnull", False),
                        ("group__isnull", True),
                        ("name", ""),
                    ),
                    models.Q(
                        ("district__isnull", True),
                        ("group__isnull", False),
                        ("name", ""),
                    ),
                    models.Q(
                        ("district__isnull", True),
                        ("group__isnull", True),
                        models.Q(("name", ""), _negated=True),
                    ),
                    _connector="OR",
                ),
                name="site_operator_must_be_one_type",
                violation_error_message="A site operator must be either a district, group, or third party, but not multiple types. District and group operators must have blank names, while third party operators must have a name.",  # noqa: E501
            ),
        ),
        migrations.AddConstraint(
            model_name="siteoperator",
            constraint=models.UniqueConstraint(
                condition=models.Q(("name__exact", ""), _negated=True),
                fields=("name",),
                name="unique_third_party_name",
                violation_error_message="Third party operators must have a unique name.",
            ),
        ),
        migrations.AddConstraint(
            model_name="site",
            constraint=models.CheckConstraint(
                condition=models.Q(("latitude__gte", -90), ("latitude__lte", 90)),
                name="latitude_range",
                violation_error_message="Latitude must be between -90 and 90 degrees.",
            ),
        ),
        migrations.AddConstraint(
            model_name="site",
            constraint=models.CheckConstraint(
                condition=models.Q(("longitude__gte", -180), ("longitude__lte", 180)),
                name="longitude_range",
                violation_error_message="Longitude must be between -180 and 180 degrees.",
            ),
        ),
        migrations.AddConstraint(
            model_name="site",
            constraint=models.CheckConstraint(
                condition=models.Q(("uprn__regex", "^\\d{12}$")),
                name="uprn_format",
                violation_error_message="UPRN must be exactly 12 digits.",
            ),
        ),
    ]
